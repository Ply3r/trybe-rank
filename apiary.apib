FORMAT: 1A
HOST: https://tryberank-api.herokuapp.com/

# TrybeRank

TrybeRank API allows for the communication between the Front-end React Web Application and the Back-end MongoDB database.
The communication is made with the use of endpoints described in this document

## User Routes [/user]
User-related routes

### Information [GET]

This route is used to GET current user information such as nickname, progress in the quizes, etc.

+ Request
    + Headers
        
            Authorization: JWT Token

+ Response 200 (application/json)
    
        {
            username: string,
            nickname: string,
            completed_questions: object[],
            completed_quizes: object[],
            image_url: string
        }


### Create [POST]

You may add a new user using this POST route.

+ Request (application/json)
    + Body
    
            {
                username: string (required, pattern)
                password: string (required, pattern)
            }

+ Response 201 (application/json)
       
        {
            username: string
            password: string
        }

### Update Information [PUT]

You may update current user's information with this PUT route.

+ Request (application/json)
    + Headers
    
            Authorization: JWT Token

    + Body
    
            {
                username: string (required, pattern)
                nickname: string (pattern)
                image_url: string (pattern)
            }

+ Response 200 (application/json)
        
        {
            username: string
            nickname: string
            image_url: string
        }

### Update Questions [PATCH]

User completed questions, quizes and points are updated using this PATCH route.

+ Request (application/json)
    + Headers
    
            Authorization: JWT Token

    + Body
    
            {
                newQuestions: object[] (required)
                newQuiz: object (required)
            }

+ Response 200 (application/json)
        
        {
            username: string
            completed_questions: object[]
            completed_quizes: object[]
        }

## Questions Routes [/questions]
Question-related routes

### List All [GET]que

This route is used to GET every quiz questions in the database

+ Response 200 (application/json)
        
        [
            {
                _id: string,
                question: string,
                type: string,
                difficulty: object,
                correct_id: string
            }
        ]


### Create [POST]

This POST route is used to create a new question in the database.

+ Request (application/json)
    + Body
    
            {
                question: string (required, length: 8 - 200)
                type: string (required, length: 3 - 15)
                difficulty: string (required, length: 5 - 20)
                answers: : string[] (required, pattern)
            }

+ Response 201 (application/json)
       
        {
                question: string (required, length: 8 - 200)
                type: string (required, length: 3 - 15)
                difficulty: string (required, length: 5 - 20)
                answers: : string[] (required, pattern)
        }